{% macro finalize() %}

{% if tasks["DANGEROUS_delete_source_fastq_after_rsync"]|default(false) %}
{#
This will only run in special circumstances and will not be enablable from kbase.
Expecation is that after rsync, which should be error free, we no longer need the
fastq from the source location.
#}

{% set fastq_list = [] %}
{% for fastq in dataFiles %}
  {% set fastq_path %}{{ fastq.fastqPath | dirname | dirname }}{% endset %}
  {% do fastq_list.append(fastq_path) %}
{% endfor %}

- name: clean_up_source
  input: 
    {% for fastq_path in fastq_list | unique %}
    - {{ fastq_path }}
    {% endfor %}
  before: finalize
  after-re: ^(?!finalize).*$
  cpus: 1
  mem: 2G
  walltime: "1:00:00"
  container: {{ constants.tools.base.container }}
  digest: {{ constants.tools.base.digest }}
  cmd: |
    set -euv

    {% for fastq in dataFiles %}
    rm -f {{ fastq.fastqPath }}
    {% endfor %}

{% endif %}

- name: finalize
  after-re: .*
  cpus: 1
  mem: 2G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.finalize.container }}
  digest: {{ constants.tools.finalize.digest }}
  cmd: |
    set -uev

    mkdir --parents qc
    multiqc --force --outdir qc .

    mkdir --parents symbolic_links
    cd symbolic_links

    {# Create symbolic links to deepvariant pass vcf, ichorCNA seg file, gatk igv seg file, merged vcf, and bams/crams #}
    {% for general_library_type, data_files in dataFiles | groupby('gltype') %}
      {% if general_library_type in 'exome' %}
        {% set taskPrefix = 'Exome' %}

        {% if tasks[taskPrefix+"_constitutional_snp_indel_caller_deepvariant"]|default(false) %}
          for line in `find ../{{ general_library_type }}/constitutional_variant_calls/deepvariant -name "*.deepvariant.pass.vcf.gz"`
          do
            ln --symbolic --force ${line}
            ln --symbolic --force ${line}.tbi
          done
        {% endif %}

        {% if tasks[taskPrefix+"_somatic_merge_vcfs_vcfMerger2"]|default(false) %}
          for line in `find ../{{ general_library_type }}/somatic_variant_calls/vcfmerger2 -name "*.merged.vcf.gz"`
          do
            ln --symbolic --force ${line}
            ln --symbolic --force ${line}.tbi
          done
        {% endif %}

        {% if tasks[taskPrefix+"_somatic_cna_caller_gatk"]|default(false) %}
          for line in `find ../{{ general_library_type }}/somatic_copy_number/gatk -name "*.re_centered.cr.igv.seg"`
          do
            ln --symbolic --force ${line}
          done
        {% endif %}
      {% elif general_library_type in 'genome' %}
        {% set taskPrefix = 'Genome' %}

        {% if tasks[taskPrefix+"_constitutional_snp_indel_caller_deepvariant"]|default(false) %}
          for line in `find ../{{ general_library_type }}/constitutional_variant_calls/deepvariant -name "*.deepvariant.pass.vcf.gz"`
          do
            ln --symbolic --force ${line}
            ln --symbolic --force ${line}.tbi
          done
        {% endif %}

        {% if tasks[taskPrefix+"_constitutional_cna_caller_ichor"]|default(false) %}
          for line in `find ../{{ general_library_type }}/copy_number_analysis/ichorCNA -name "*.ichorCNA.cna.seg"`
          do
            ln --symbolic --force ${line}
          done
        {% endif %}

        {% if tasks[taskPrefix+"_somatic_merge_vcfs_vcfMerger2"]|default(false) %}
          for line in `find ../{{ general_library_type }}/somatic_variant_calls/vcfmerger2 -name "*.merged.vcf.gz"`
          do
            ln --symbolic --force ${line}
            ln --symbolic --force ${line}.tbi
          done
        {% endif %}

        {% if tasks[taskPrefix+"_somatic_cna_caller_gatk"]|default(false) %}
          for line in `find ../{{ general_library_type }}/somatic_copy_number/gatk -name "*.re_centered.cr.igv.seg"`
          do
            ln --symbolic --force ${line}
          done
        {% endif %}
      {% elif general_library_type in 'rna' %}
        {% set taskPrefix = 'RNA' %}
      {% endif %}

    {% if cram|default(true) %}
      for line in `find ../{{ general_library_type }}/alignment -name "*.cram"`
      do
        ln --symbolic --force ${line}
        ln --symbolic --force ${line}.crai
      done
    {% else %}
      for line in `find ../{{ general_library_type }}/alignment -name "*.bam"`
      do
        ln --symbolic --force ${line}
        ln --symbolic --force ${line}.bai
      done
    {% endif %}

  {% endfor %}

{% endmacro %}