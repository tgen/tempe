{% from 'utilities/remove_files.j2' import remove_files with context %}
# This macro adds tasks for running GATK BaseRecalibrator on the output
# from markdups.
{% macro baserecalibration(sample, aligner='bwa') %}

{% for batch in constants.tempe.sequence_groupings %}
- name: baserecalibration_table_{{ sample.name }}_{{ aligner }}_{{ loop.index }}
  tags: [{{ sample.gltype }}, alignment, base_recalibration, gatk, {{ sample.name }}]
  reset: predecessors
  input: 
    - temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.md.bam
    - {{ constants.tempe.reference_fasta }}
    {% for vcf in constants.tempe.gatk_known_sites %}
    - {{ vcf }}
    {% endfor %}
  output:
    - temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.recal_data.chunk_{{ loop.index }}.table
  walltime: "4:00:00"
  cpus: 4
  mem: 16G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.gatk.container }}
  digest: {{ constants.tools.gatk.digest }}
  cmd: |
    set -eu
    set -o pipefail

    gatk \
      --java-options "-Xmx14G" \
      BaseRecalibrator \
      --use-original-qualities \
      --reference "{{ constants.tempe.reference_fasta }}" \
      {% for vcf in constants.tempe.gatk_known_sites %}
      --known-sites "{{ vcf }}" \
      {% endfor %}
      {% for interval in batch %}
      --intervals "{{ interval }}:1+" \
      {% endfor %}
      {% if loop.last %}
      --intervals "unmapped" \
      {% endif %}
      --input "temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.md.bam" \
      --output "temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.recal_data.chunk_{{ loop.index }}.table"

{% endfor %}

- name: gather_bqsr_reports_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, alignment, base_recalibration, gatk, {{ sample.name }}]
  reset: predecessors
  input:
    {% for batch in constants.tempe.sequence_groupings %}
    - temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.recal_data.chunk_{{ loop.index }}.table
    {% endfor %}
  output: 
    - temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.recal_data.table
  walltime: "4:00:00"
  cpus: 4
  mem: 16G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.gatk.container }}
  digest: {{ constants.tools.gatk.digest }}
  cmd: |
    set -eu
    set -o pipefail

    gatk \
      --java-options "-Xmx14G" \
      GatherBQSRReports \
      {% for b in constants.tempe.sequence_groupings %}
      --input "temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.recal_data.chunk_{{ loop.index }}.table" \
      {% endfor %}
      --output "temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.recal_data.table"


{% for batch in constants.tempe.sequence_groupings %}
- name: apply_base_recalibration_{{ sample.name }}_{{ aligner }}_{{ loop.index }}
  tags: [{{ sample.gltype }}, alignment, base_recalibration, gatk, {{ sample.name }}]
  reset: predecessors
  input:
    - temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.md.bam
    - temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.recal_data.table
  output:
    - temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.recal_chunk_{{ loop.index }}.bam
  walltime: "4:00:00"
  cpus: 8
  mem: 32G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.gatk.container }}
  digest: {{ constants.tools.gatk.digest }}
  cmd: |
    set -eu
    set -o pipefail

    {# Removed --emit-original-quals and --use-original-quals #}
    {# --emit* results in a "significant increase of the file size" #}
    gatk ApplyBQSR \
      --java-options "-Xmx28G" \
      --static-quantized-quals 10 \
      --static-quantized-quals 20 \
      --static-quantized-quals 30 \
      --static-quantized-quals 40 \
      --reference "{{ constants.tempe.reference_fasta }}" \
      --input "temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.md.bam" \
      --bqsr-recal-file "temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.recal_data.table" \
      {% for interval in batch %}
      --intervals "{{ interval }}:1+" \
      {% endfor %}
      {% if loop.last %}
      --intervals "unmapped" \
      {% endif %}
      --output "temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.recal_chunk_{{ loop.index }}.bam"

{% endfor %}

- name: merge_bqsr_bam_chunks_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, alignment, base_recalibration, gatk, {{ sample.name }}]
  reset: predecessors
  input:
    {% for batch in constants.tempe.sequence_groupings %}
    - temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.recal_chunk_{{ loop.index }}.bam
    {% endfor %}
  output:
    - {{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam
    - {{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam.bai
  walltime: "4:00:00"
  cpus: 4
  mem: 16G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.gatk.container }}
  digest: {{ constants.tools.gatk.digest }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p "{{ sample.gltype}}/alignment/{{ aligner }}/{{ sample.name }}/"

    gatk GatherBamFiles \
      --java-options "-Xmx14G" \
      --OUTPUT "{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam" \
      {% for b in constants.tempe.sequence_groupings %}
      --INPUT "temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.recal_chunk_{{ loop.index }}.bam" \
      {% endfor %}

    samtools index -@ 4 "{{ sample.gltype}}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam"

    {% for b in constants.tempe.sequence_groupings %}
    rm "temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.recal_chunk_{{ loop.index }}.bam"
    {% endfor %}

{% endmacro %}


{# Moves the markduplicates bam without doing baserecalibration #}
{% macro nobaserecalibration(sample, aligner='bwa') %}
- name: no_baserecalibration_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, {{ sample.name }}]
  reset: predecessors
  input: temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.md.bam
  output:
    - {{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam
    - {{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam.bai
  walltime: "1:00:00"
  cpus: 10
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.samtools.container }}
  digest: {{ constants.tools.samtools.digest }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p "{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/"
    mv \
      "temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.md.bam" \
      "{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam"

    samtools index -@ 10 "{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam"

{% set task %}no_baserecalibration_{{ sample.name }}_{{ aligner }}{% endset %}
{% set before_list = [] %}
{% set before %}freebayes_sex_check_{{ sample.name }}_{{ aligner }}{% endset %}
{% do before_list.append(before) %}
{% set before %}samtools_process_freebayes_sex_check_{{ sample.name }}_{{ aligner }}{% endset %}
{% do before_list.append(before) %}
{% set directory %}temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}{% endset %}
{{- remove_files(directory,before_list,task) }}

{% endmacro %}