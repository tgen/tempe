{# This macro splits large fastqs into chunks prior to aligning. #}
{# If fastq is less than reads_per_chunk (48000000) then one chunk is made. #}
{% macro split_fastqs(sample, reads_per_chunk) %}

{% set temp_dir %}temp/fastqs/{{ sample.name }}{% endset %}

{% for rgid, rg in sample.read_groups.items() %}
{% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
{% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}

{# Comment about the math, using the assumed legacy illumina interpretation, it is a TGen modification #}
{% set n_lines = (reads_per_chunk * 4)|int %}
{% set n_chunks = (r1fastq.numberOfReads / 2 / reads_per_chunk)|round(0, method='ceil')|int %}
{% if n_chunks > 99 %}{{ raise('ValueError', 'Too many chunks!') }}{% endif %}

{% for fastq in [r1fastq, r2fastq] %}
- name: split_fastq_{{ fastq.basename | replace(".", "_") }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, split, {{ sample.name }}]
  reset: predecessors
  input:
    - temp/fastqs/{{ fastq.basename }}
  output:
    {% for i in range(n_chunks) %}
    {% set chunk_suffix = '%02d' % i %}
    - {{ temp_dir }}/{{ rgid }}/{{ fastq.basename }}/{{ chunk_suffix }}
    {% endfor %}
  cpus: 1
  mem: 2G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.samtools.container }}
  digest: {{ constants.tools.samtools.digest }}
  cmd: |
    set -eu
    set -o pipefail

    rm -r "{{ temp_dir }}/{{ rgid }}/{{ fastq.basename }}/" || true
    mkdir -p "{{ temp_dir }}/{{ rgid }}/{{ fastq.basename }}/"

    zcat "temp/fastqs/{{ fastq.basename }}" |\
      split \
        --numeric-suffixes \
        --suffix-length 2 \
        --lines {{ n_lines }} \
        --filter='gzip -1 > $FILE' \
        - \
        "{{ temp_dir }}/{{ rgid }}/{{ fastq.basename }}/"

    N_CREATED=$(ls "{{ temp_dir }}/{{ rgid }}/{{ fastq.basename }}/" | wc -l)

    if [[ ${N_CREATED} -ne {{ n_chunks }} ]]
    then
      echo "Chunks created does not match expected value"
      exit 1
    fi

{% endfor %}
{% endfor %}

{% endmacro %}
