
# This alignment command prefix is shared by all modules using bwa
{% from 'utilities/read_group_line.j2' import read_group_line with context %}
{% from 'utilities/remove_files.j2' import remove_files with context %}
{% from 'modules/dna_alignment/gatk_baserecalibration.j2' import baserecalibration, nobaserecalibration with context %}
{% from 'utilities/bam_to_cram.j2' import bam_to_cram with context %}

# This macro splits large fastqs into chunks prior to aligning.
# If fastq is less than reads_per_chunk (48000000) then one chunk is made.
{% macro bwa_mem2_samtools(sample, reads_per_chunk, opt_dup_distance, aligner) %}

{% set temp_dir %}temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}{% endset %}
{% set results_dir %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}{% endset %}

{% for rgid, rg in sample.read_groups.items() %}
{% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
{% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}

{# Comment about the math, using the assumed legacy illumina interpretation, it is a TGen modification #}
{% set n_lines = (reads_per_chunk * 4)|int %}
{% set n_chunks = (r1fastq.numberOfReads / 2 / reads_per_chunk)|round(0, method='ceil')|int %}
{% if n_chunks > 99 %}{{ raise('ValueError', 'Too many chunks!') }}{% endif %}

{% for i in range(n_chunks) %}
{% set chunk_suffix = '%02d' % i %}
- name: chunked_bwa_mem_samtools_fixmate_{{ sample.name }}_{{ aligner }}_{{ rgid }}_{{ chunk_suffix }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, {{ sample.name }}]
  reset: predecessors
  input:
    - temp/fastqs/{{ sample.name }}/{{ rgid }}/{{ r1fastq.basename }}/{{ chunk_suffix }}
    - temp/fastqs/{{ sample.name }}/{{ rgid }}/{{ r2fastq.basename }}/{{ chunk_suffix }}
    - {{ constants.tempe.bwa_mem2_index }}
  output: {{ temp_dir }}/{{ rgid }}/{{ chunk_suffix }}.{{ aligner }}.bam
  walltime: "24:00:00"
  cpus: 20
  mem: 80G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bwa_mem2_samtools.container }}
  digest: {{ constants.tools.bwa_mem2_samtools.digest }}
  cmd: |
    set -eu
    set -o pipefail

    {#
    # If this task was interrupted previously, temp files may exist
    # that will cause errors with samtools sort. Here, we purge any
    # existing temp files before making the directory again.
    #}
    rm -r "{{ temp_dir }}/{{ rgid }}/{{ chunk_suffix }}_st_sort_temp/" || true
    mkdir -p "{{ temp_dir }}/{{ rgid }}/{{ chunk_suffix }}_st_sort_temp/"

    {# No long options available for the following:
     bwa mem
        -v INT       Verbosity: 3 = message (default = 3)
        -Y           Use soft clipping for supplementary alignments
        -K INT       Process INT input bases in each batch regardless of nThreads (for reproducibility)
        -t INT       Number of threads to use
        -R STR       Read group header line such as '@RG\tID:foo\tSM:bar' [null]

     samtools fixmate
        -m           Add mate score tag, REQUIRED for samtools markdup
        -            Input from stdin
        -            Output to stdout

     samtools sort
        -l INT       Set compression level, from 0 (uncompressed) to 9 (best)
        -m INT       Set maximum memory per thread; suffix K/M/G recognized [768M]
        -T PREFIX    Write temporary files to PREFIX.nnnn.bam
        -            Input from stdin
        -o FILE      Write final output to FILE rather than standard output
    #}
    bwa-mem2 mem \
      -v 3 \
      -Y \
      -K 100000000 \
      -t 19 \
      -R "{{ read_group_line(rg, format='bwa') }}" \
      "{{ constants.tempe.bwa_mem2_index }}" \
      "temp/fastqs/{{ sample.name }}/{{ rgid }}/{{ r1fastq.basename }}/{{ chunk_suffix }}" \
      "temp/fastqs/{{ sample.name }}/{{ rgid }}/{{ r2fastq.basename }}/{{ chunk_suffix }}" |\
    samtools fixmate \
      --threads 19 \
      -m \
      - \
      - |\
    samtools sort \
      -T "{{ temp_dir }}/{{ rgid }}/{{ chunk_suffix }}_st_sort_temp/{{ chunk_suffix }}" \
      -u \
      -m 3G \
      --threads 19 \
      --output-fmt BAM \
      -o "{{ temp_dir }}/{{ rgid }}/{{ chunk_suffix }}.{{ aligner }}.bam" \
      -

{% endfor %}
{% endfor %}


{% for rglb, rg in sample.read_groups.values() | groupby('rglb') %}
- name: chunked_samtools_merge_rgid_bams_{{ sample.name }}_{{ rglb }}_{{ aligner }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, {{ sample.name }}]
  reset: predecessors
  input: 
  {% for rgid in rg %}
    {% set r1fastq = rgid.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
    {% set n_chunks = (r1fastq.numberOfReads / 2 / reads_per_chunk)|round(0, method='ceil')|int %}
    {% for i in range(n_chunks) %}
    {% set chunk_suffix = '%02d' % i %}
    - {{ temp_dir }}/{{ rgid.rgid }}/{{ chunk_suffix }}.{{ aligner }}.bam
    {% endfor %}
  {% endfor %}
  output: {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.bam
  walltime: "24:00:00"
  cpus: 4
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bwa_mem2_samtools.container }}
  digest: {{ constants.tools.bwa_mem2_samtools.digest }}
  cmd: |
    set -eu
    set -o pipefail

    {# No long options available for the following:
      -c           Combine @RG headers with colliding IDs [alter IDs to be distinct]
      -f           Overwrite the output BAM if exist
      -l INT       Compression level, from 0 to 9 [-1]
    #}
    samtools merge \
      --threads 4 \
      -c \
      -f \
      -u \
      {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.bam \
      {% for rgid in rg %}
      {% set r1fastq = rgid.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
      {% set n_chunks = (r1fastq.numberOfReads / 2 / reads_per_chunk)|round(0, method='ceil')|int %}
      {% if not loop.last %}
      {% for i in range(n_chunks) %}
      {% set chunk_suffix = '%02d' % i %}
      {{ temp_dir }}/{{ rgid.rgid }}/{{ chunk_suffix }}.{{ aligner }}.bam \
      {% endfor %}
      {% else %}
      {% for i in range(n_chunks) %}
      {% set chunk_suffix = '%02d' % i %}
      {% if not loop.last %}
      {{ temp_dir }}/{{ rgid.rgid }}/{{ chunk_suffix }}.{{ aligner }}.bam \
      {% else %}
      {{ temp_dir }}/{{ rgid.rgid }}/{{ chunk_suffix }}.{{ aligner }}.bam
      {% endif %}
      {% endfor %}
      {% endif %}
      {% endfor %}

{% set totalReads = rg|sum(attribute='numberOfReads') %}
{% set read_bins = [0, 500000000, 1000000000, 2000000000, 4000000000, 8000000000] %}
{% set memory_bins = ['16G','32G','48G','64G','80G'] %}

- name: samtools_markdup_{{ sample.name }}_{{ rglb }}_{{ aligner }}
  tags: [{{ sample.gltype }}, alignment, mark_duplicates, samtools, {{ sample.name }}]
  reset: predecessors
  methods: Duplicate reads for {{ sample.name }} were marked with samtools markdup.
  input: {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.bam
  output:
    {% if sample.read_groups.values() | groupby('rglb') | length == 1 %}
    - {{ temp_dir }}/{{ sample.name }}.{{ aligner }}.md.bam
    {% else %}
    - {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.md.bam
    {% endif %}
    - {{ results_dir }}/stats/{{ sample.name }}_{{ rglb }}.{{ aligner }}.bam.samtools.markdup.json
  walltime: "96:00:00"
  cpus: 4
  mem: {{ totalReads|assignbin(read_bins, memory_bins) }}
  queue_preset: "DEFAULT-LONG"
  container: {{ constants.tools.bwa_mem2_samtools.container }}
  digest: {{ constants.tools.bwa_mem2_samtools.digest }}
  cmd: |
    set -eu
    set -o pipefail

    {#
    # If this task was interrupted previously, temp files may exist
    # that will cause errors with samtools markdup. Here, we purge any
    # existing temp files before making the directory again.
    #}
    rm -r "{{ temp_dir }}/markdup_temp/{{ sample.name }}_{{ rglb }}" || true
    mkdir -p "{{ temp_dir }}/markdup_temp/{{ sample.name }}_{{ rglb }}"
    mkdir -p "{{ results_dir }}/stats/"

    {#
    # Choose an optical distance based on sequencer
    #}

    {# No long options available for the following:
     -d      Optical distance
     -S      Mark supplemenary alignments of duplicates as duplicates (slower)
     -f      Write stats to named file. Implies -s (report stats)
     -T      PREFIX    Write temporary files to PREFIX.samtools.nnnn.nnnn.tmp
     2>      Stats are output to stderr which is redirected to ".{{ aligner }}.bam.markdup.txt"
    #}
    samtools markdup \
      {% if sample.pcrCycles is defined and sample.pcrCycles == 0 %}
      --use-read-groups \
      {% endif %}
      --json \
      -d {{ opt_dup_distance }} \
      -S \
      -f {{ results_dir }}/stats/{{ sample.name }}_{{ rglb }}.{{ aligner }}.bam.samtools.markdup.json \
      --threads 4 \
      --write-index \
      -T {{ temp_dir }}/markdup_temp/{{ sample.name }}_{{ rglb }} \
      {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.bam \
      {% if sample.read_groups.values() | groupby('rglb') | length == 1 %}
      {{ temp_dir }}/{{ sample.name }}.{{ aligner }}.md.bam
      {% else %}
      {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.md.bam
      {% endif %}

{% endfor %}

{% if sample.read_groups.values() | groupby('rglb') | length > 1 %}
- name: chunked_samtools_merge_rglb_bams_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, {{ sample.name }}]
  reset: predecessors
  input: 
  {% for rglb, rg in sample.read_groups.values() | groupby('rglb') %}
    - {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.md.bam
  {% endfor %}
  output: {{ temp_dir }}/{{ sample.name }}.{{ aligner }}.md.bam
  walltime: "24:00:00"
  cpus: 4
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bwa_mem2_samtools.container }}
  digest: {{ constants.tools.bwa_mem2_samtools.digest }}
  cmd: |
    set -eu
    set -o pipefail

    {# No long options available for the following:
      -c           Combine @RG headers with colliding IDs [alter IDs to be distinct]
      -f           Overwrite the output BAM if exist
    #}
    samtools merge \
      --threads 4 \
      -c \
      -f \
      --write-index \
      {{ temp_dir }}/{{ sample.name }}.{{ aligner }}.md.bam \
      {% for rglb, rg in sample.read_groups.values() | groupby('rglb') %}
      {% if not loop.last %}
      {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.md.bam \
      {% else %}
      {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.md.bam
      {% endif %}
      {% endfor %}

{% endif %}

{% if tasks[sample.gltype|capitalize+"_alignment_base_recalibration_gatk"]|default(false) %}
  {{- baserecalibration(sample, aligner) }}
{% else %}
  {{- nobaserecalibration(sample, aligner) }}
{% endif %}
{{- bam_to_cram(sample, aligner) }}


{% endmacro %}
