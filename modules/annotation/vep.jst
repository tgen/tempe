{% from 'utilities/vcf2maf.jst' import vcf2maf with context %}

{% macro vep(sample_or_pair, results_dir, input_vcf, variant_caller, final_vcf_prefix, aligner, analysis_type) %}

- name: vep_all_{{ variant_caller }}_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, annotate_vcfs, {{ analysis_type }}, {{ variant_caller }}, {{ sample_or_pair.name }}]
  input:
    - {{ input_vcf }}
    - {{ constants.tempe.vep_data }}
    - {{ constants.tempe.reference_fasta }}
  output: {{ final_vcf_prefix }}.vep.full.vcf
  walltime: "8:00:00"
  cpus: 4
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.vep.container }}
  digest: {{ constants.tools.vep.digest }}
  cmd: |
    set -eu
    set -o pipefail

    {# Use VEP to create full annotation file with all transcripts #}
    vep --fork 4 \
        --input_file "{{ input_vcf }}" \
        --format vcf \
        --output_file "{{ final_vcf_prefix }}.vep.full.vcf" \
        --stats_file "{{ final_vcf_prefix }}.vep.full.stats.html" \
        --vcf \
        --vcf_info_field CSQ \
        --species homo_sapiens \
        --force_overwrite \
        --cache \
        --dir_cache "{{ constants.tempe.vep_data }}" \
        --cache_version {{ constants.tempe.gene_model_version }} \
        --offline \
        --fasta "{{ constants.tempe.reference_fasta }}" \
        --buffer_size 10000 \
        --terms SO \
        --hgvs \
        --hgvsg \
        --symbol \
        --sift b \
        --polyphen b \
        --humdiv \
        --uniprot \
        --domains \
        --canonical \
        --flag_pick_allele_gene \
        --pick_order canonical,appris,tsl,biotype,rank,ccds,length

- name: vep_all_bcftools_compress_{{ variant_caller }}_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, annotate_vcfs, {{ analysis_type }}, {{ variant_caller }}, {{ sample_or_pair.name }}]
  input:
    - {{ final_vcf_prefix }}.vep.full.vcf
  output:
    - {{ final_vcf_prefix }}.vep.full.vcf.gz
    - {{ final_vcf_prefix }}.vep.full.vcf.gz.tbi
  walltime: "8:00:00"
  cpus: 4
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  digest: {{ constants.tools.bcftools.digest }}
  cmd: |
    set -eu
    set -o pipefail

    {# Convert to compressed VCF #}
    bcftools view \
        --threads 4 \
        --output-type z \
        --output-file "{{ final_vcf_prefix }}.vep.full.vcf.gz" \
        "{{ final_vcf_prefix }}.vep.full.vcf"

    rm  "{{ final_vcf_prefix }}.vep.full.vcf"

    bcftools index --threads 4 --force --tbi "{{ final_vcf_prefix }}.vep.full.vcf.gz"

{% if sample_or_pair.tumor is defined and variant_caller == 'merged' %}
{% set output_vcf %}{{ final_vcf_prefix }}.vep.full.vcf.gz{% endset %}
{{ vcf2maf(sample_or_pair, output_vcf, aligner, variant_caller, 'vep_all') }}
{% endif %}

- name: vep_con_{{ variant_caller }}_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, annotate_vcfs, {{ analysis_type }}, {{ variant_caller }}, {{ sample_or_pair.name }}]
  input:
    - {{ input_vcf }}
    - {{ constants.tempe.vep_data }}
    - {{ constants.tempe.reference_fasta }}
  output: {{ final_vcf_prefix }}.vep.pick.vcf
  walltime: "8:00:00"
  cpus: 4
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.vep.container }}
  digest: {{ constants.tools.vep.digest }}
  cmd: |
    set -euv
    set -o pipefail

    {# Use VEP to create full annotation file with all transcripts #}
    vep --fork 4 \
        --input_file "{{ input_vcf }}" \
        --format vcf \
        --output_file "{{ final_vcf_prefix }}.vep.pick.vcf" \
        --stats_file "{{ final_vcf_prefix }}.vep.pick.stats.html" \
        --vcf \
        --vcf_info_field CSQ \
        --species homo_sapiens \
        --force_overwrite \
        --cache \
        --dir_cache "{{ constants.tempe.vep_data }}" \
        --cache_version {{ constants.tempe.gene_model_version }} \
        --offline \
        --fasta "{{ constants.tempe.reference_fasta }}" \
        --buffer_size 10000 \
        --terms SO \
        --hgvs \
        --hgvsg \
        --symbol \
        --sift b \
        --polyphen b \
        --humdiv \
        --uniprot \
        --domains \
        --canonical \
        --pick_allele_gene \
        --pick_order canonical,appris,tsl,biotype,rank,ccds,length

- name: vep_con_bcftools_compress_{{ variant_caller }}_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, annotate_vcfs, {{ analysis_type }}, {{ variant_caller }}, {{ sample_or_pair.name }}]
  input:
    - {{ final_vcf_prefix }}.vep.pick.vcf
  output:
    - {{ final_vcf_prefix }}.vep.pick.vcf.gz
    - {{ final_vcf_prefix }}.vep.pick.vcf.gz.tbi
  walltime: "8:00:00"
  cpus: 4
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  digest: {{ constants.tools.bcftools.digest }}
  cmd: |
    set -euv
    set -o pipefail

    {# Convert to compressed VCF #}
    bcftools view \
        --threads 4 \
        --output-type z \
        --output-file "{{ final_vcf_prefix }}.vep.pick.vcf.gz" \
        "{{ final_vcf_prefix }}.vep.pick.vcf"

    rm "{{ final_vcf_prefix }}.vep.pick.vcf"

    bcftools index --threads 4 --force --tbi "{{ final_vcf_prefix }}.vep.pick.vcf.gz"

{% if sample_or_pair.tumor is defined and variant_caller == 'merged' %}
{% set output_vcf %}{{ final_vcf_prefix }}.vep.pick.vcf.gz{% endset %}
{{ vcf2maf(sample_or_pair, output_vcf, aligner, variant_caller, 'vep_con') }}
{% endif %}

{% endmacro %}
