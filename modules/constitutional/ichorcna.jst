{% from 'utilities/remove_files.jst' import remove_files with context %}
{% from 'modules/metrics/bpure.jst' import bpure with context %}
{% from 'modules/qc/stats2lims.jst' import stats2lims with context %}

{% macro ichorcna(sample, aligner='bwa', taskPrefix='Genome') %}
{% set bam %}{{ sample.gltype}}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set temp_dir %}temp/{{ sample.gltype }}/copy_number_analysis/ichorCNA/{{ sample.name }}_{{ aligner }}/{{ sample.name }}.{{ aligner }}.ichor_rundir{% endset %}
{% set results_dir %}{{ sample.gltype }}/copy_number_analysis/ichorCNA/{{ sample.name }}_{{ aligner }}{% endset %}
{% set wig %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.wig{% endset %}
{% set ichor_json %}{{ results_dir }}/{{ sample.name}}.{{ aligner }}.ichorCNA.json{% endset %}

{% set control = {} %}
{% if controlDataFiles is defined %}
  {% if controlDataFiles|selectattr('assayCode', 'eq', sample.assayCode)|first is defined %}
    {% do control.update(controlDataFiles|selectattr('assayCode', 'eq', sample.assayCode)|first) %}
    {% if control.rgsm is defined %}
        {% set name %}{{ control.rgsm }}_{{ control.assayCode }}{% endset %}
    {% else %}
        {% set name %}{{ study }}_{{ control.assayCode }}{% endset %}
    {% endif %}
    {% do control.update({'name': name}) %}
  {% endif %}
{% endif %}

- name: hmmcopy_make_wig_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, cna_caller, ichor, {{ sample.name }}]
  input: 
    - {{ bam }}
    - {{ bam }}.bai
  output: {{ wig }}
  walltime: "24:00:00"
  cpus: 1
  mem: 2G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.hmmcopy.container }}
  digest: {{ constants.tools.hmmcopy.digest }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p "{{ results_dir }}/"

    readCounter \
      --window 1000000 \
      --quality 20 \
      --chromosome "chr1,chr2,chr3,chr4,chr5,chr6,chr7,chr8,chr9,chr10,\
    chr11,chr12,chr13,chr14,chr15,chr16,chr17,chr18,chr19,chr20,chr21,\
    chr22,chrX,chrY" \
      "{{ bam }}" \
      > "{{ wig }}"


- name: ichor_cna_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, cna_caller, ichor, {{ sample.name }}]
  {% if control.ichorPon is defined %}
  reset: prepare_tumor_only_{{ control.name }}
  {% endif %}
  input:
    - {{ wig }}
    {% if control.ichorPon is defined %}
    - temp/tumor_only/control_data_files/{{ control.assayCode }}/{{ control.ichorPon | basename }}
    {% endif %}
  output:
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.cna.seg
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.seg
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.correctedDepth.txt
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.params.txt
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.RData
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.seg.txt
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA_bias.pdf
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA_correct.pdf
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA_CNA_all_chrs.pdf
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA_genomeWide_all_sols.pdf
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA_genomeWide.pdf
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA_tpdf.pdf
    - {{ ichor_json }}
  walltime: "24:00:00"
  cpus: 1
  mem: 2G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.ichorcna.container }}
  digest: {{ constants.tools.ichorcna.digest }}
  cmd: |
    set -eu
    set -o pipefail

    {# Purge any existing results files prior to starting #}
    rm -r "{{ temp_dir }}" || true
    mkdir -p "{{ temp_dir }}"

    {#
    # ichorCNA includes some pre-built references in the source code, this command
    # finds these files dynamically with R system.find before starting
    #}
    EXTDATA=$(Rscript <(echo "cat(system.file('extdata/', package='ichorCNA'))"))

    {#
    # The ichorCNA launcher script does not currently get installed with
    # the rest of the package, so this path is hard coded in constants.yaml
    #}
    runIchorCNA.R \
      --id "{{ sample.name}}.{{ aligner }}.ichorCNA" \
      --WIG "{{ wig }}" \
      --outDir "{{ temp_dir }}" \
      --includeHOMD False \
      --estimateNormal True \
      --estimatePloidy True \
      --estimateScPrevalence True \
      --txnE 0.9999 \
      --txnStrength 10000 \
      --genomeStyle "UCSC" \
      --genomeBuild "hg38" \
      --chrs "c('chr1','chr2','chr3','chr4','chr5','chr6','chr7','chr8','chr9','chr10',\
      'chr11','chr12','chr13','chr14','chr15','chr16','chr17','chr18','chr19','chr20','chr21',\
      'chr22','chrX')" \
      --chrTrain "c('chr1','chr2','chr3','chr4','chr5','chr6','chr7','chr8','chr9','chr10',\
      'chr11','chr12','chr13','chr14','chr15','chr16','chr17','chr18','chr19','chr20','chr21',\
      'chr22')" \
      --scStates "c(1,3)" \
      --ploidy "c(2,3)" \
      --normal "c(0.25,0.5,0.6,0.7,0.8,0.9)" \
      {% if control.ichorPon is defined %}
      --normalPanel temp/tumor_only/control_data_files/{{ control.assayCode }}/{{ control.ichorPon | basename }} \
      {% endif %}
      --maxCN 7 \
      --normalizeMaleX FALSE \
      --gcWig ${EXTDATA}/gc_hg38_1000kb.wig \
      --mapWig ${EXTDATA}/map_hg38_1000kb.wig \
      --centromere ${EXTDATA}/GRCh38.GCA_000001405.2_centromere_acen.txt

    {# Creating json for stats2lims #}
    tumor_frac=$(grep "Tumor Fraction:" {{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.params.txt | awk '{ print $3 }')
    ploidy=$(grep "Ploidy:" {{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.params.txt | awk '{ print $2 }')

    cat <<EOF > {{ ichor_json }}
    {"SAMPLES": [{"LIBRARIES": [{"READGROUPS": [{}], "tumorFraction": "${tumor_frac}", "ploidy": "${ploidy}", "LB": "{{ sample.rglb }}" }], "SM": "{{ sample.name }}"}]}
    EOF
    {#
    # Move the output files to the final location
    #}
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.cna.seg" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.seg" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.correctedDepth.txt" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.params.txt" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.RData" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.seg.txt" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA/{{ sample.name }}.{{ aligner }}.ichorCNA_bias.pdf" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA/{{ sample.name }}.{{ aligner }}.ichorCNA_correct.pdf" "{{ results_dir }}/"
    {% for contig in constants.tempe.calling_contigs %}
    {# Stopping at chrX #}
    {% if loop.index < 24 %}
    mv {{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA/{{ sample.name }}.{{ aligner }}.ichorCNA_CNA_chr{{ contig.contig }}.pdf {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA_CNA_{{ contig.contig }}.pdf
    {% endif %}
    {% endfor %}
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA/{{ sample.name }}.{{ aligner }}.ichorCNA_genomeWide_all_sols.pdf" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA/{{ sample.name }}.{{ aligner }}.ichorCNA_genomeWide.pdf" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA/{{ sample.name }}.{{ aligner }}.ichorCNA_tpdf.pdf" "{{ results_dir }}/"

{# Remove the remaining files #}
{% set task %}ichor_cna_{{ sample.name }}_{{ aligner }}{% endset %}
{% set directory %}{{ temp_dir }}{% endset %}
{{- remove_files(directory,none,task) }}

{% set task %}{{ sample.name }}_{{ aligner }}{% endset %}
{{- stats2lims(sample.gltype, sample.name, task, ichor_json, "ichor_cna") }}

{% if studyDisease == "Multiple Myeloma" | default(false) %}
{% set input_seg %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.cna.seg{% endset %}
{{- bpure(sample, input_seg, 'low', 'ichor', aligner) }}
{% endif %}

{% endmacro %}
