
{% macro expansion_hunter(sample, aligner='bwa') %}
{% set bam %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set temp_dir %}temp/{{ sample.gltype }}/constitutional_variant_calls/expansion_hunter/{{ sample.name }}_{{ aligner }}{% endset %}
{% set results_dir %}{{ sample.gltype }}/constitutional_variant_calls/expansion_hunter/{{ sample.name }}_{{ aligner }}{% endset %}

- name: expansion_hunter_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, repeats, expansion, SRT, {{ sample.name }}]
  input: 
    - {{ bam }}
    - {{ bam }}.bai
    - {{ constants.tempe.reference_fasta }}
  output:
    - {{ temp_dir }}/{{ sample.name }}.expansion_hunter.vcf
  walltime: "24:00:00"
  cpus: 1
  mem: 2G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.expansion_hunter.container }}
  digest: {{ constants.tools.expansion_hunter.digest }}
  cmd: |
    set -eu
    set -o pipefail

    rm -r {{ temp_dir }} || true
    mkdir -p {{ temp_dir }}
    mkdir -p {{ results_dir }}

    ExpansionHunter \
      --reads {{ bam }} \
      --reference {{ constants.tempe.reference_fasta }} \
      --variant-catalog /usr/local/lib/grch38/variant_catalog.json \
      --output-prefix {{ temp_dir }}/{{ sample.name }}.expansion_hunter


- name: expansion_hunter_filter_variants_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, deepvariant, {{ sample.name }}]
  input:
    - {{ temp_dir }}/{{ sample.name }}.expansion_hunter.vcf
    {% if sample.gltype == 'exome' %}
    - {{ sample.capture_kit.extended_bed }}
    {% endif %}
  output:
    - {{ results_dir }}/{{ sample.name }}.expansion_hunter.all.vcf.gz
    - {{ results_dir }}/{{ sample.name }}.expansion_hunter.all.vcf.gz.tbi
    - {{ results_dir }}/{{ sample.name }}.expansion_hunter.pass.vcf.gz
    - {{ results_dir }}/{{ sample.name }}.expansion_hunter.pass.vcf.gz.tbi
  cpus: 1
  mem: 2G
  walltime: "12:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  digest: {{ constants.tools.bcftools.digest }}
  cmd: |
    set -eu
    set -o pipefail

    bcftools view \
      --output-type z \
      --output-file {{ results_dir }}/{{ sample.name }}.expansion_hunter.all.vcf.gz \
      {{ temp_dir }}/{{ sample.name }}.expansion_hunter.vcf

    bcftools index --tbi --force {{ results_dir }}/{{ sample.name }}.expansion_hunter.all.vcf.gz

    {# Then filter out the PASS variants to a separate file #}
    bcftools filter \
      --output-type z \
      --include 'FILTER == "PASS"' \
      {% if sample.gltype == 'exome' %}
      --targets-file "{{ sample.capture_kit.extended_bed }}" \
      {% endif %}
      "{{ results_dir }}/{{ sample.name }}.expansion_hunter.all.vcf.gz" \
      > "{{ results_dir }}/{{ sample.name }}.expansion_hunter.pass.vcf.gz"

    bcftools index --tbi --force "{{ results_dir }}/{{ sample.name }}.expansion_hunter.pass.vcf.gz"

{% endmacro %}
