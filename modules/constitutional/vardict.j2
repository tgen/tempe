{% from 'modules/annotation/main.j2' import annotate_vcfs with context %}
{% from 'utilities/vcf_stats.j2' import vcf_stats with context %}

{% macro vardict_constitutional(sample, aligner='bwa', taskPrefix='Genome') %}
{% set bam %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set temp_dir %}temp/{{ sample.gltype }}/constitutional_variant_calls/vardict/{{ sample.name }}_{{ aligner }}{% endset %}
{% set results_dir %}{{ sample.gltype }}/constitutional_variant_calls/vardict/{{ sample.name }}_{{ aligner }}{% endset %}
{% set all_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.vardict.all.vcf.gz{% endset %}
{% set pass_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.vardict.pass.vcf.gz{% endset %}
{% set chip_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.vardict.chip.vcf.gz{% endset %}

{% for batch in constants.tempe.calling_intervals %}
- name: vardict_makewindows_{{ sample.name }}_{{ aligner }}_{{ loop.index }}
  tags: [{{ sample.gltype }}, somatic, snp_indel_caller, VarDict, {{ sample.name }}]
  input:
    - {{ bam }}
    - {{ bam }}.bai
  output:
    - {{ temp_dir }}/{{ loop.index }}.bed
  cpus: 1
  mem: 2G
  walltime: "24:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bedtools.container }}
  digest: {{ constants.tools.bedtools.digest }}
  cmd: |
    set -eu
    set -o pipefail
    
    mkdir -p "{{ temp_dir }}"

    {#
    # Write out the regions in this batch to a file
    # Here we use bedtools to split each interval into smaller chunks
    # and the -s option to create overlaps in the chunks. This is due
    # to the VarDict memory usage spiking very high on larger intervals.
    #}
    TAB=$'\t'
    cat <<EOF | bedtools makewindows -w 20000 -s 19850 -b - > "{{ temp_dir }}/{{ loop.index }}.bed"
    {% for interval in batch %}
    {{ interval.contig }}${TAB}{{ interval.start - 1 }}${TAB}{{ interval.stop }}
    {% endfor %}
    EOF


- name: vardict_{{ sample.name }}_{{ aligner }}_{{ loop.index }}
  tags: [{{ sample.gltype }}, constitutional, snp_indel_caller, VarDict, {{ sample.name }}]
  input:
    - {{ bam }}
    - {{ bam }}.bai
    - {{ temp_dir }}/{{ loop.index }}.bed
    - {{ constants.tempe.reference_fasta }}
  output:
    - {{ temp_dir }}/{{ loop.index }}.vardict.vcf
  cpus: 4
  mem: 32G
  walltime: "24:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.vardict.container }}
  digest: {{ constants.tools.vardict.digest }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p "{{ temp_dir }}"

    {#
    # Custom settings:
    # -O 45 : defalut is no filtering, suspect that means 0, setting high for CHIP
    # -q 20 (default is 25), set as novaseq has bins of 2, 12, 23, 37
    # enabled -UN to only count the first in pair when an overlap exists, didn't use -u that uses the
    # forward strand read which might be second in pairs that typically has worse quality.
    # -V 0.005 : Not sure but seems this will be needed to call variants at 1% AF
    # -f 0.005 : min AF to consider
    # -F 0x500 : should be same as default, should not consider unmapped reads... right?
    # vcf2vcf_valid.pl
    # -f 0.005 : goal is to detecte variants at >0.01 so this gives some buffer
    # -v 5 : with target depth >1000x, 1% should still be 10
    # -d 50 : sets minimum total depth could make this much higher
    # -p 10 : given high depth mean position in read should be more central, but capture might bias a bit
    #}

    {# No long options available for the following:
      VarDict
          -th <INT>                           Threads count.
          -b <string>                         The indexed BAM file
          -N <string>                         The sample name to be used directly.  Will overwrite -n option
          -G <Genome fasta>                   The reference fasta. Should be indexed (.fai).
                                              Defaults to: /ngs/reference_data/genomes/Hsapiens/hg19/seq/hg19.fa.  Also short commands can be used to
                                              set path to:
                                              hg19 - /ngs/reference_data/genomes/Hsapiens/hg19/seq/hg19.fa
                                              hg38 - /ngs/reference_data/genomes/Hsapiens/hg38/seq/hg38.fa
                                              mm10 - /ngs/reference_data/genomes/Mmusculus/mm10/seq/mm10.fa
          -A <INT>                            The number of STD. A pair will be considered for DEL if INSERT > INSERT_SIZE + INSERT_STD_AMT *
                                              INSERT_STD.  Default: 4
          -B <INT>                            The minimum # of reads to determine strand bias, default 2
          -F <bit>                            The hexical to filter reads using samtools. Default: 0x504 (filter 2nd alignments, unmapped reads and
                                              duplicates).  Use -F 0 to turn it off.
          -f <double>                         The threshold for allele frequency, default: 0.01 or 1%
          -I <INT>                            The indel size.  Default: 50bp
          -k <0/1>                            Indicate whether to perform local realignment.  Default: 1.  Set to 0 to disable it.  For Ion or PacBio,
                                              0 is recommended.
          -M <INT>                            The minimum matches for a read to be considered. If, after soft-clipping, the matched bp is less than
                                              INT, then the read is discarded. It's meant for PCR based targeted sequencing where there's no insert and
                                              the matching is only the primers.
                                              Default: 0, or no filtering
          -m <INT>                            If set, reads with mismatches more than INT will be filtered and ignored.  Gaps are not counted as
                                              mismatches.
                                              Valid only for bowtie2/TopHat or BWA aln followed by sampe.  BWA mem is calculated as NM - Indels.
                                              Default: 8,
                                              or reads with more than 8 mismatches will not be used.
          -O <MapQ>                           The reads should have at least mean MapQ to be considered a valid variant.  Default: no filtering
          -o <Qratio>                         The Qratio of (good_quality_reads)/(bad_quality_reads+0.5).  The quality is defined by -q option.
                                              Default: 1.5
          -P <number>                         The read position filter.  If the mean variants position is less that specified, it's considered false
                                              positive.  Default: 5
          -Q <INT>                            If set, reads with mapping quality less than INT will be filtered and ignored
          -q <INT>                            The phred score for a base to be considered a good call.  Default: 25 (for Illumina)
                                              For PGM, set it to ~15, as PGM tends to under estimate base quality.
          -r <minimum reads>                  The minimum # of variant reads, default 2
          -UN                                 Indicate unique mode, which when mate pairs overlap, the overlapping part will be counted only once using
                                              first read only.
          -V <freq>                           The lowest frequency in the normal sample allowed for a putative constitutional mutation.  Defaults to 0.05
          -VS <STRICT | LENIENT | SILENT>     How strict to be when reading a SAM or BAM.
                                              STRICT	- throw an exception if something looks wrong.
                                              LENIENT	- Emit warnings but keep going if possible.
                                              SILENT	- Like LENIENT, only don't emit warning messages.
                                              Default: LENIENT
          -X <INT>                            Extension of bp to look for mismatches after insersion or deletion.  Default to 2 bp, or only calls when
                                              they're within 2 bp.
          -x <INT>                            The number of nucleotide to extend for each segment, default: 0
          -c <INT>                            The column for chromosome
          -S <INT>                            The column for region start, e.g. gene start
          -E <INT>                            The column for region end, e.g. gene end
      var2vcf_valid.pl
          -S If set, variants that didn't pass filters will not be present in VCF file
          -a For amplicon based variant calling.  Variant not supported by all amplicons will be considered false positve, with filter set to "AMPBIAS".
          -A Indicate to output all variants at the same position.  By default, only the variant with the highest allele frequency is converted to VCF.
          -c  int
            If two seemingly high quality SNV variants are within {int} bp, they're both filtered.  Default: 0, or no filtering
          -I  int
            The maximum non-monomer MSI allowed for a HT variant with AF < 0.5.  By default, 12, or any variants with AF < 0.5 in a region
            with >6 non-monomer MSI will be considered false positive.  For monomers, that number is 13.
         -m  double
            The maximum mean mismatches allowed.  Default: 5.25, or if a variant is supported by reads with more than 5.25 mean mismathes, it'll be considered
            false positive.  Mismatches don't includes indels in the alignment.
         -p  float
            The minimum mean position of variants in the read.  Default: 8.
         -P  0 or 1
            Whehter to filter variants with pstd = 0.  Default: 1 or yes.  Set it to 0 for targeted PCR based sequencing, where pstd is expected.
         -q  float
            The minimum mean base quality.  Default to 22.5 for Illumina sequencing
         -Q  float
            The minimum mapping quality.  Default to 10.0 for Illumina sequencing.  Variants with lower quality (<10) will be kept only if af >= 0.8
         -d  integer
            The minimum total depth.  Default to 3, might consider lower depth if (high quality variant count)*af >= 0.5
         -v  integer
            The minimum high quality variant depth.  Default to 2.  Would consider lower depth (high quality variant count)*af >= 0.5
         -f  float
            The minimum allele frequency.  Default to 0.02
         -o  signal/noise
            The minimum signal to noise, or the ratio of hi/(lo+0.5).  Default to 1.5, that is both 2 variant reads are high quality.
         -F  float
            The minimum allele frequency to consider to be homozygous.  Default to 0.2.  Thus frequency < 0.2 will
            be considered homozygous REF, while frequency > 0.2 will be considered homozygous ALT.
         -N  string
            The sample name to be used directly.
         -E  If set, do not print END tag
         -T  integer
            The minimum number of split reads for SV.  Default: 1.  Change to 0 if you want SV called from discordant pairs only.
         -b  Path to the *.bed file which is used to generate contigs in the header
    #}
    JAVA_OPTS="-Xmx26g" vardict-java \
      -th 4 \
      -b "{{ bam }}" \
      -N "{{ sample.rgsm }}" \
      -G "{{ constants.tempe.reference_fasta }}" \
      -A 4 \
      -B 2 \
      -F 0x500 \
      -f 0.005 \
      -I 50 \
      -k 1 \
      -M 0 \
      -m 8 \
      -O 45 \
      -o 1.5 \
      -P 5 \
      -Q 10 \
      -q 20 \
      -r 2 \
      --dedup \
      --nosv \
      -UN \
      -V 0.005 \
      -VS LENIENT \
      -X 2 \
      -x 0 \
      -c 1 -S 2 -E 3 \
      "{{ temp_dir }}/{{ loop.index }}.bed" \
    | teststrandbias.R \
    | var2vcf_valid.pl \
      -N "{{ sample.rgsm }}" \
      -c 0 \
      -I 12 \
      -m 5.25 \
      -P 1 \
      -p 10 \
      -q 22.5 \
      -Q 10 \
      -d 50 \
      -v 5 \
      -f 0.005 \
      -F 0.2 \
      -o 1.5 \
    > {{ temp_dir }}/{{ loop.index }}.vardict.vcf

{% endfor %}


- name: vardict_merge_chunks_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, constitutional, snp_indel_caller, VarDict, {{ sample.name }}]
  reset: predecessors
  input:
    {% for b in constants.tempe.calling_intervals %}
    - {{ temp_dir }}/{{ loop.index }}.vardict.vcf
    {% endfor %}
  output:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
  cpus: 1
  mem: 4G
  walltime: "12:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  digest: {{ constants.tools.bcftools.digest }}
  cmd: |
    set -eu
    set -o pipefail
    
    {% for b in constants.tempe.calling_intervals %}
    bcftools view \
    --output-type z \
    --output-file {{ temp_dir }}/{{ loop.index }}.vardict.vcf.gz \
    {{ temp_dir }}/{{ loop.index }}.vardict.vcf

    bcftools index --tbi --force {{ temp_dir }}/{{ loop.index }}.vardict.vcf.gz
    {% endfor %}

    mkdir -p "{{ results_dir }}"
    
    bcftools concat \
      --allow-overlaps \
      --output-type z \
      --output "{{ all_vcf }}" \
      {% for b in constants.tempe.calling_intervals %}
      {% if not loop.last %}
      "{{ temp_dir }}/{{ loop.index }}.vardict.vcf.gz" \
      {% else %}
      "{{ temp_dir }}/{{ loop.index }}.vardict.vcf.gz"
      {% endif %}
      {% endfor %}
    
    bcftools index --tbi --force "{{ all_vcf }}"
    

- name: vardict_filter_variants_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, constitutional, snp_indel_caller, VarDict, {{ sample.name }}]
  input:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
    {% if sample.gltype == 'exome' %}
    - {{ sample.capture_kit.extended_bed }}
    {% endif %}
  output:
    - {{ pass_vcf }}
    - {{ pass_vcf }}.tbi
  cpus: 1
  mem: 4G
  walltime: "12:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  digest: {{ constants.tools.bcftools.digest }}
  cmd: |
    set -eu
    set -o pipefail
    
    bcftools filter \
      --output-type z \
      --include 'FILTER == "PASS"' \
      {% if sample.gltype == 'exome' %}
      --targets-file "{{ sample.capture_kit.extended_bed }}" \
      {% endif %}
      "{{ all_vcf }}" \
      > "{{ pass_vcf }}"
     
    bcftools index --tbi --force "{{ pass_vcf }}"


{{- annotate_vcfs(sample, temp_dir, results_dir, pass_vcf, taskPrefix, aligner, 'vardict', 'constitutional') }}
{{- vcf_stats(pass_vcf, results_dir) }}
{{- vcf_stats(all_vcf, results_dir) }}

{% macro filter_chip_variants(sample, aligner, annot_flag, annotated_vcf, filtered_annot_vcf) %}

- name: vardict_filter_chip_variants_{{ sample.name }}_{{ annot_flag }}_{{ aligner }}
  tags: [{{ sample.gltype }}, constitutional, snp_indel_caller, VarDict, {{ sample.name }}]
  input:
    - {{ annotated_vcf }}
  output:
    - {{ filtered_annot_vcf }}
    - {{ filtered_annot_vcf }}.tbi
  cpus: 1
  mem: 4G
  walltime: "12:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  digest: {{ constants.tools.bcftools.digest }}
  cmd: |
    set -eu
    set -o pipefail
    
    bcftools filter \
      --output-type v \
      --include 'INFO/DP>=100 && FMT/ALD[*:0]>=4 && FMT/ALD[*:1]>=4 && INFO/MQ>=45 && INFO/QUAL>=30 && PMEAN>=11.5 && PMEAN <= 33 && (INFO/DP * INFO/AF)>=8 && INFO/AF >= 0.01 && INFO/AF < 0.4 && GNOMAD_GENOME_AF < 0.0001 && TOPMED_AF < 0.0001' \
      --output {{ filtered_annot_vcf }} \
      {{ annotated_vcf }}
    
    bcftools index --tbi --force {{ filtered_annot_vcf }}

{% endmacro %}

{# We require the topmed and gnomad_genome annotations for chip filtering to work #}
{% if tasks[taskPrefix+"_constitutional_annotate_vcfs_bcftools_topmed"]|default(false) and tasks[taskPrefix+"_constitutional_annotate_vcfs_bcftools_gnomad_genome"]|default(false) %}
  {% if tasks[taskPrefix+"_constitutional_annotate_vcfs_vep"]|default(false) %}
    {% set annotated_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.vardict.pass.db.vep.pick.vcf.gz{% endset %}
    {% set filtered_annot_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.vardict.pass.db.vep.pick.chip.vcf.gz{% endset %}
    {{- filter_chip_variants(sample, aligner, 'vep', annotated_vcf, filtered_annot_vcf) }}
  {% else %}
    {% set annotated_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.vardict.pass.db.vcf.gz{% endset %}
    {% set filtered_annot_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.vardict.pass.db.chip.vcf.gz{% endset %}
    {{- filter_chip_variants(sample, aligner, 'bcftools', annotated_vcf, filtered_annot_vcf) }}
  {% endif %}
{% endif %}

{% endmacro %}
