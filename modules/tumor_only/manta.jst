{% from 'utilities/remove_files.jst' import remove_files with context %}
{% from 'modules/annotation/vep.jst' import vep with context %}

{% macro manta_tumor_only(pair, aligner='bwa') %}
{% set tumor_only_temp %}temp/tumor_only/control_data_files/{{ pair.normal.assayCode }}{% endset %}
{% set normal_bam %}{{ tumor_only_temp }}/{{ pair.normal.pathToBam | basename }}{% endset %}
{% set tumor_bam %}{{ pair.tumor.gltype }}/alignment/{{ aligner }}/{{ pair.tumor.name }}/{{ pair.tumor.name }}.{{ aligner }}.bam{% endset %}
{% set temp_dir %}temp/{{ pair.gltype }}/tumor_only_structural_calls/manta/{{ pair.tumor.name }}_{{ aligner }}{% endset %}
{% set results_dir %}{{ pair.gltype }}/tumor_only_structural_calls/manta/{{ pair.tumor.name }}_{{ aligner }}{% endset %}
{% set summary_samtools_stats %}{{ pair.gltype }}/alignment/{{ aligner }}/{{ pair.tumor.name }}/stats/{{ pair.tumor.name }}.{{ aligner }}.bam_samtools_insertSize_summary.tsv{% endset %}

- name: tumor_only_manta_{{ pair.tumor.name }}_{{ aligner }}
  tags: [{{ pair.gltype }}, tumor_only, structural_caller, manta, {{ pair.tumor.name }}]
  input:
    - {{ normal_bam }}
    - {{ tumor_bam }}
    - {{ constants.tempe.reference_fasta }}
  output: 
    - {{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.candidateSmallIndels.vcf.gz
    - {{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.candidateSmallIndels.vcf.gz.tbi
    - {{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.candidateSV.vcf.gz
    - {{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.candidateSV.vcf.gz.tbi
    - {{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.diploidSV.vcf.gz
    - {{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.diploidSV.vcf.gz.tbi
    - {{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.somaticSV.vcf.gz
    - {{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.somaticSV.vcf.gz.tbi
  cpus: 40
  mem: 80G
  walltime: "24:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.manta.container }}
  digest: {{ constants.tools.manta.digest }}
  cmd: |
    set -eu
    set -o pipefail

    {# Purge any existing run files prior to starting #}
    rm -r "{{ temp_dir }}" || true
    mkdir -p "{{ temp_dir }}"

    {#
    # In order to restrict calling to only the specified regions
    # Manta requires a bed file (that has been bgzipped and indexed
    # with tabix). Here we generate that file on the fly, store in
    # the run dir, and pass the path to Manta.
    #}
    MANTA_BED="{{ temp_dir }}/callRegions.bed"
    TAB=$'\t'
    cat <<EOF > "${MANTA_BED}"
    {% for contig in constants.tempe.calling_contigs %}
    {{ contig.contig }}${TAB}0${TAB}{{ contig.length }}
    {% endfor %}
    EOF

    bgzip -f "${MANTA_BED}"
    tabix -f -p bed "${MANTA_BED}.gz"

    {#
    # Some settings are only configurable via tha ini file. Here
    # we generate this ini file and save it to the run dir.
    #}
    MANTA_CONFIG="{{ temp_dir }}/config.ini"
    cat <<EOF > "${MANTA_CONFIG}"
    [manta]
    enableRemoteReadRetrievalForInsertionsInCancerCallingModes = 1
    EOF

    {# Build the Manta run file #}
    configManta.py \
      {% if pair.gltype == 'exome' %}
      --exome \
      {% endif %}
      --callRegions "${MANTA_BED}.gz" \
      --config "${MANTA_CONFIG}" \
      --normalBam "{{ normal_bam }}" \
      --tumorBam "{{ tumor_bam }}" \
      --referenceFasta "{{ constants.tempe.reference_fasta }}" \
      --runDir "{{ temp_dir }}"

    {# Execute on the local machine with 19 parallel jobs #}
    "{{ temp_dir }}/runWorkflow.py" -m local -j 39

    {# Save all the vcs in the sample dir #}
    mkdir -p "{{ results_dir }}" || true

    mv "{{ temp_dir }}/results/variants/candidateSmallIndels.vcf.gz" "{{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.candidateSmallIndels.vcf.gz"
    mv "{{ temp_dir }}/results/variants/candidateSmallIndels.vcf.gz.tbi" "{{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.candidateSmallIndels.vcf.gz.tbi"
    mv "{{ temp_dir }}/results/variants/candidateSV.vcf.gz" "{{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.candidateSV.vcf.gz"
    mv "{{ temp_dir }}/results/variants/diploidSV.vcf.gz" "{{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.diploidSV.vcf.gz"
    mv "{{ temp_dir }}/results/variants/somaticSV.vcf.gz" "{{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.somaticSV.vcf.gz"
    mv "{{ temp_dir }}/results/variants/candidateSV.vcf.gz.tbi" "{{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.candidateSV.vcf.gz.tbi"
    mv "{{ temp_dir }}/results/variants/diploidSV.vcf.gz.tbi" "{{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.diploidSV.vcf.gz.tbi"
    mv "{{ temp_dir }}/results/variants/somaticSV.vcf.gz.tbi" "{{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.somaticSV.vcf.gz.tbi"


- name: tumor_only_manta_filter_pass_{{ pair.tumor.name }}_{{ aligner }}
  tags: [{{ pair.gltype }}, tumor_only, manta, flag, {{ pair.tumor.name }}]
  input:
    - {{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.somaticSV.vcf.gz
    - {{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.somaticSV.vcf.gz.tbi
  output:
    - {{ temp_dir }}/results/variants/somaticSV.pass.vcf.gz
    - {{ temp_dir }}/results/variants/somaticSV.pass.vcf.gz.tbi
  cpus: 1
  mem: 2G
  walltime: "12:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  digest: {{ constants.tools.bcftools.digest }}
  cmd: |
    set -eu
    set -o pipefail

    {# Ensuring that the output dir exists for bcftools filter #}
    mkdir -p {{ temp_dir }}/results/variants

    {# filtering tumor_only vcf by PASS #}
    bcftools filter \
      -i 'FILTER == "PASS"' \
      -O z \
      -o {{ temp_dir }}/results/variants/somaticSV.pass.vcf.gz \
      {{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.somaticSV.vcf.gz

    bcftools index --tbi --force {{ temp_dir }}/results/variants/somaticSV.pass.vcf.gz


- name: tumor_only_manta_flag_{{ pair.tumor.name }}_{{ aligner }}
  tags: [{{ pair.gltype }}, tumor_only, manta, flag, {{ pair.tumor.name }}]
  reset: tumor_only_manta_filter_pass_{{ pair.tumor.name }}_{{ aligner }}
  input:
    - {{ temp_dir }}/results/variants/somaticSV.pass.vcf.gz
    - {{ temp_dir }}/results/variants/somaticSV.pass.vcf.gz.tbi
    - {{ tumor_bam }}
    - {{ normal_bam }}
    - {{ summary_samtools_stats }}
  output:
    - {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf
  cpus: 4
  mem: 4G
  walltime: "12:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.python3_with_modules.container }}
  digest: {{ constants.tools.python3_with_modules.digest }}
  cmd: |
    set -eu
    set -o pipefail

    {# Ensuring that the output dir exists for bcftools filter #}
    mkdir -p {{ temp_dir }}/results/variants

    {# Capturing the insert_size and its standard deviation from summary samtools stats file #}
    INSERT_SIZE=$(cat {{ summary_samtools_stats }} | tail -n 1 | cut -f9 )
    STD_IS=$(cat {{ summary_samtools_stats }} | tail -n 1 | cut -f11 )
    echo -e "----------------"
    echo ${INSERT_SIZE}
    echo ${STD_IS}
    echo -e "----------------"
    {# adding fields and flags to pass.vcf.gz file #}
    {% set temp_dir_pass_vcf %}{{ temp_dir }}/results/variants/somaticSV.pass.vcf{% endset %}

    # {{ required_scripts.manta_prepare_sv_vcf.path }} md5: {{ required_scripts.manta_prepare_sv_vcf.path | md5 }}
    python3 {{ required_scripts.manta_prepare_sv_vcf.path }} \
      -p 4 \
      -i {{ temp_dir }}/results/variants/somaticSV.pass.vcf.gz \
      -t {{ tumor_bam }} \
      -n {{ normal_bam }} \
      --tumor-name {{ pair.tumor.rgsm }} \
      --insert-size ${INSERT_SIZE} \
      --sigma ${STD_IS} \
      --minmapq 15 \
      --output {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf \
      --logfile {{ temp_dir }}/results/variants/log_prepare_sv_vcf.txt


- name: tumor_only_manta_compress_flag_{{ pair.tumor.name }}_{{ aligner }}
  tags: [{{ pair.gltype }}, tumor_only, manta, flag, {{ pair.tumor.name }}]
  reset: predecessors
  input:
    - {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf
  output:
    - {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf.gz
    - {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf.gz.tbi
  cpus: 1
  mem: 2G
  walltime: "12:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  digest: {{ constants.tools.bcftools.digest }}
  cmd: |
    set -eu
    set -o pipefail

    {# compress vcf to vcf.gz #}
    bcftools view \
      -O z \
      -o {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf.gz \
      {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf

    bcftools index --tbi --force {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf.gz


{% set input_vcf %}{{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf.gz{% endset %}
{% set final_vcf_prefix %}{{ results_dir }}/{{ pair.tumor.name }}.{{ aligner }}.manta.somaticSV.pass{% endset %}
{{- vep(pair, results_dir, input_vcf, 'manta', final_vcf_prefix, aligner, 'somatic') }}

{% endmacro %}