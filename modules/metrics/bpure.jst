{% from 'modules/qc/stats2lims.jst' import stats2lims with context %}

{% macro bpure(sample, input_seg, seg_resolution, variant_caller, aligner='bwa') %}

{% set sample_bam %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set temp_dir %}temp/{{ sample.gltype }}/metrics/b_pure/{{ sample.name }}_{{ aligner }}{% endset %}
{% set results_dir %}{{ sample.gltype }}/metrics/b_pure/{{ sample.name }}_{{ aligner }}{% endset %}

{% set library_list = [] %}
{% for rglb, rg in sample.read_groups.values() | groupby('rglb') %}
  {% do library_list.append(rglb) %}
{% endfor %}

- name: bpure_{{ variant_caller }}_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, b_cell_purity, {{ sample.name }}]
  input:
    - {{ sample_bam }}
    - {{ input_seg }}
    - {{ constants.tempe.reference_fasta }}
    - {{ constants.tempe.dj_window }}
  output:
    - {{ results_dir }}/{{ sample.name }}_{{ variant_caller }}_{{ seg_resolution }}_res_b_cell_purity.tsv
    {% for library in library_list %}
    {% if loop.length == 1 %}
    - {{ results_dir }}/{{ sample.name }}_{{ variant_caller }}_{{ seg_resolution }}_res_b_cell_purity.json
    {% else %}
    - {{ results_dir }}/{{ sample.name }}_{{ variant_caller }}_{{ seg_resolution }}_res_{{ library }}_b_cell_purity.json
    {% endif %}
    {% endfor %}
  cpus: 2
  mem: 8G
  walltime: "24:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bpure.container }}
  digest: {{ constants.tools.bpure.digest }}
  cmd: |
    set -eu
    set -o pipefail

    {# Should already exist #}
    mkdir -p {{ temp_dir }}
    mkdir -p {{ results_dir }}

    {#
    These bash comments will be updated at render time and cause the task 
    identity to change based on changes to input files/scripts
    #}
    # {{ required_scripts.bpure.path }} md5: {{ required_scripts.bpure.path | md5 }}
    python {{ required_scripts.bpure.path }} \
        --bam-file {{ sample_bam }} \
        --seg-file {{ input_seg }} \
        --seg-resolution {{ seg_resolution }} \
        --reference-file {{ constants.tempe.reference_fasta }} \
        --region-file {{ constants.tempe.dj_window }} \
        --temp-dir {{ temp_dir }} \
        --output-dir {{ results_dir }} \
        --output-prefix {{ sample.name }}_{{ variant_caller }}_{{ seg_resolution }}_res \
        --sample-name {{ sample.name }} \
        --lib {{ library_list | join(',') }} \
        --json-out True

{% for library in library_list %}
  {% set task %}bpure_{{ variant_caller }}_{{ sample.name }}_{{ aligner }}_{{ library }}{% endset %}
  {% if loop.length == 1 %}
    {% set json %}{{ results_dir }}/{{ sample.name }}_{{ variant_caller }}_{{ seg_resolution }}_res_b_cell_purity.json{% endset %}
  {% else %}
    {% set json %}{{ results_dir }}/{{ sample.name }}_{{ variant_caller }}_{{ seg_resolution }}_res_{{ library }}_b_cell_purity.json{% endset %}
  {% endif %}
  {{- stats2lims(sample.gltype, sample.name, task, json, "b_pure") }}
{% endfor %}

{% endmacro %}